name: 'main'

on:
  push:
  pull_request:

env:
  PYTHON3_VERSION: 3.8.6

jobs:
  windows-msvc:
    runs-on: windows-2019

    strategy:
      matrix:
        configuration: [ debug, release ]

    env:
      CC: cl
      CXX: cl
      NO_TCMALLOC: On

    defaults:
      run:
        shell: cmd

    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON3_VERSION }}
        architecture: x64

    - name: Install Core Dependencies
      run: |
        choco install -y make
        choco install -y swig --version=3.0.12
        choco install -y python3 --version=${{ env.PYTHON3_VERSION }} --installargs="/quiet Include_debug=1 TargetDir=%pythonLocation%"

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        java-package: jre
        architecture: x64

    - name: Configure Git
      run: git config --global core.autocrlf input
      shell: bash

    - name: Get top commit details
      uses: actions/github-script@0.3.0
      id: author-date
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const commit_details = await github.git.getCommit({ owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha });
          echo "COMMITTED_AT2=$(date -d commit_details +'%Y.%m.%d_%H.%M.%S')" >> $GITHUB_ENV
          echo ${{ env.COMMITTED_AT2 }}
          return commit_details.data.author.date

    - name: Retrieve date
      run: |
        echo "COMMITTED_AT=$(date -d ${{ steps.author-date.outputs.result }} +'%Y.%m.%d_%H.%M.%S')" >> $GITHUB_ENV
        echo "COMMITTED_AT=${{ env.COMMITTED_AT }}"
        echo "COMMITTED_AT2=${{ env.COMMITTED_AT2 }}"
      shell: bash

    - name: Git Pull
      uses: actions/checkout@v2

    - name: Pull UHDM
      uses: actions/checkout@v2
      with:
        repository: alainmarcel/UHDM
        path: third_party/UHDM
        # token: ${{ secrets.GHA_DAVENCHE_CI_TOKEN }}

    - name: Pull flatbuffers
      uses: actions/checkout@v2
      with:
        repository: google/flatbuffers
        path: third_party/flatbuffers
        # token: ${{ secrets.GHA_DAVENCHE_CI_TOKEN }}

    - name: Pull googletest
      uses: actions/checkout@v2
      with:
        repository: google/googletest
        path: third_party/googletest

    - name: Pull capnproto
      uses: actions/checkout@v2
      with:
        repository: capnproto/capnproto
        path: third_party/UHDM/third_party/capnproto
        # token: ${{ secrets.GHA_DAVENCHE_CI_TOKEN }}

    - name: Build Debug
      if: matrix.configuration == 'debug'
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

        set MAKE_DIR=C:\make\bin
        set TCL_DIR=%PROGRAMFILES%\Git\mingw64\bin
        set SWIG_DIR=%PROGRMDATA%\chocolatey\lib\swig\tools\install\swigwin-3.0.12
        set PATH=%SWIG_DIR%;%JAVA_HOME%\bin;%MAKE_DIR%;%TCL_DIR%;%PATH%

        set
        where cmake && cmake --version
        where make && make --version
        where swig && swig -version
        where java && java -version
        where python && python --version
        where ninja && ninja --version

        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DPython3_ROOT_DIR=%pythonLocation% -DCMAKE_INSTALL_PREFIX=out/install -S . -B out/build
        cmake --build out/build -j %NUMBER_OF_PROCESSORS%
        cmake --install out/build

    - name: Build Release
      if: matrix.configuration == 'release'
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

        set MAKE_DIR=C:\make\bin
        set TCL_DIR=%PROGRAMFILES%\Git\mingw64\bin
        set SWIG_DIR=%PROGRMDATA%\chocolatey\lib\swig\tools\install\swigwin-3.0.12
        set PATH=%SWIG_DIR%;%JAVA_HOME%\bin;%MAKE_DIR%;%TCL_DIR%;%PATH%

        set
        where cmake && cmake --version
        where make && make --version
        where swig && swig -version
        where java && java -version
        where python && python --version
        where ninja && ninja --version

        cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPython3_ROOT_DIR=%pythonLocation% -DCMAKE_INSTALL_PREFIX=out/install -S . -B out/build
        cmake --build out/build -j %NUMBER_OF_PROCESSORS%
        cmake --install out/build

    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Surelog_windows-msvc-${{ matrix.configuration }}_${{ env.COMMITTED_AT }}
        path: out/install

#    - name: Configure AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: us-west-1
#
#    - name: Upload archive to bucket
#      run: |
#        cd out
#        tar czfp Surelog_windows-msvc-${{ matrix.configuration }}_${{ env.COMMITTED_AT }}.tgz install
#        aws s3 cp Surelog_windows-msvc-${{ matrix.configuration }}_${{ env.COMMITTED_AT }}.tgz s3://davenche-bin/Surelog_windows-msvc-${{ matrix.configuration }}_${{ env.COMMITTED_AT }}.tgz
